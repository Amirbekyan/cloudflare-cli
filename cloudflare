#!/bin/bash

declare -A opts
verbose=0
NL=$'\n'
TA=$'\t'
APIv1_ENDPOINT=https://www.cloudflare.com/api_json.html
APIv4_ENDPOINT=https://api.cloudflare.com/client/v4
usage_text="Usage: cloudflare [-v] [-E <email>] [-T <api_token>] <command> <parameters>
Environment variables:
 CF_ACCOUNT  -  email address (as -E option)
 CF_TOKEN    -  API token (as -T option)
Enter \"cloudflare help\" to list available commands."


die()
{
	echo "$1" >&2
	exit ${2:-1}
}

is_verbose()
{
	[ "$verbose" = 1 ]
}

is_integer()
{
	expr "$1" : '[0-9]\+$' >/dev/null
}

call_cf()
{
	local exitcode=0
	declare -a curl_opts
	while true
	do
		curl_opts=()
		for oname in "${!opts[@]}"
		do
			curl_opts+=(-d "$oname=${opts[$oname]}")
		done
		
		output=`curl -sS "$APIv1_ENDPOINT" "${curl_opts[@]}" | json_decode "$@"`
		exitcode=$?
		sed -e '/^!/d' <<<"$output"
		
		if grep -qE '^!has_more' <<<"$output"
		then
			count=`grep -E ^!count= <<<"$output" | cut -f2 -d=`
			let opts[o]+=$count
		else
			unset opts[o]
			break
		fi
	done
	return $exitcode
}

call_cf_v4()
{
	local method path formtype
	method=${1^^}
	shift
	path=$1
	shift
	formtype=data
	declare -a curl_opts
	curl_opts=()
	if [ "$method" = POST ]
	then
		formtype=form
	fi
	if [ "$method" != POST ]
	then
		curl_opts+=(-H "Content-Type: application/json")
	fi
	if [ "$method" != POST -a "$method" != DELETE ]
	then
		curl_opts+=(-G)
	fi

	while [ -n "$1" ]
	do
		if [ ."$1" = .-- ]
		then
			shift
			if [ -z "$1" ]
			then
				set -- '&?success?"success"?"failed"'
			fi
			break
		else
			curl_opts+=(--$formtype "$1")
		fi
		shift
	done
	if is_verbose
	then
		echo "<<< curl -X $method ${curl_opts[*]} $APIv4_ENDPOINT$path" >&2
	fi
	curl -sS -H "X-Auth-Email: $CF_ACCOUNT" -H "X-Auth-Key: $CF_TOKEN" \
		-X "$method" "${curl_opts[@]}" \
		"$APIv4_ENDPOINT$path" | json_decode "$@"
}

json_decode()
{
	php -r '
		function notzero($e)
		{
			return $e!=0;
		}
		function pfmt($fmt, &$array, $z=0)
		{
			if(preg_match("/^\?(.*?)\?(.*?)\?(.*)/", $fmt, $grp))
			{
				$out = pfmt($grp[1], $array, 1) ? pfmt($grp[2], $array) : pfmt($grp[3], $array);
			}
			elseif(preg_match("/^!(.*)/", $fmt, $grp))
			{
				$out = implode(",", array_keys(array_filter($array[$grp[1]], "notzero")));
			}
			elseif(preg_match("/^<(.*)/", $fmt, $grp))
			{
				$code = $grp[1];
				extract($array, EXTR_SKIP);
				$out = eval("return $code;");
			}
			elseif(preg_match("/^\x22(.*?)\x22/", $fmt, $grp))
			{
				$out = $grp[1];
			}
			elseif(preg_match("/^@(.*?)@(.*)/", $fmt, $grp))
			{
				$out = substr($array[$grp[2]], 0, -strlen(".".$array[$grp[1]]));
				if($out == "") $out = "@";
			}
			else
			{
				/* Cludflare DNS record notation fix: */
				if(isset($array["type"]) and in_array($array["type"], array("CNAME", "MX")) and isset($array["content"]) and substr($array["content"], -1) != ".")
				{
					$array["content"] .= ".";
				}
				if(is_array($array[$fmt]))
				{
					$out = implode(",", $array[$fmt]);
				}
				else
				{
					$out = $z ? $array[$fmt] : (array_key_exists($fmt, $array) ? (isset($array[$fmt]) ? $array[$fmt] : "NULL" ) : "NA");
				}
			}
			return $out;
		}

		$data0 = json_decode(file_get_contents("php://stdin"), 1);
		if('$verbose') file_put_contents("php://stderr", var_export($data0, 1));
		if($data0["result"] == "error")
		{
			echo $data0["msg"] . "\n";
			exit(2);
		}
		if(array_key_exists("success", $data0) and !$data0["success"])
		{
			foreach($data0["errors"] as $e)
			{
				printf("E%s: %s\n", $e["code"], $e["message"]);
			}
			exit(2);
		}

		array_shift($argv);
		$data = $data0;
		foreach($argv as $param)
		{
			if($param == "")
			{
				continue;
			}
			if(substr($param, 0, 1) == ".")
			{
				$data = $data0;
				foreach(explode(".", $param) as $p)
				{
					if($p != "")
					{
						if(array_key_exists($p, $data))
						{
							if($p == "objs" and $data["has_more"])
							{
								echo "!has_more\n";
								echo "!count=", $data["count"], "\n";
							}
							$data = $data[$p];
						}
						else
						{
							$data = array();
							break;
						}
					}
				}
			}
			if(substr($param, 0, 1) == "%")
			{
				$outfmt = substr($param, 1);
			}
			if($param == "table")
			{
				ksort($data);
				$maxlength = 0;
				foreach($data as $key=>$elem)
				{
					if(strlen($key) > $maxlength)
					{
						$maxlength = strlen($key);
					}
				}
				foreach($data as $key=>$elem)
				{
					printf("%-".$maxlength."s\t%s\n", $key, (string)$elem);
				}
			}
			if(substr($param, 0, 1) == ",")
			{
				foreach($data as $key=>$elem)
				{
					$out = array();
					foreach(preg_split("/(?<!,),(?!,)/", $param) as $p)
					{
						$p = str_replace(",,", ",", $p);
						if($p != "")
						{
							$out[] = pfmt($p, $elem);
						}
					}
					if(isset($outfmt))
					{
						vprintf($outfmt, $out);
					}
					else
					{
						echo implode("\t", $out), "\n";
					}
				}
			}
			if(substr($param, 0, 1) == "&")
			{
				foreach(explode("&", $param) as $p)
				{
					if($p!="")
					{
						echo pfmt($p, $data), "\n";
					}
				}
			}
		}
	' "$@"
}

findout_z_id()
{
	# arguments:
	#   $1 - record name (eg: sub.example.com)
	#   $2 - record type, optional (eg: CNAME)
	#   $3 - 0/1, stop searching at first match, optional
	# writes global variables: opts[a] opts[z] opts[name] opts[id] opts[type]
	# return code:
	#   0 - zone name, record id found and stored in opts[z], opts[id] respectively
	#   2 - no suitable zone found
	#   3 - no matching record found
	#   4 - more than 1 matching record found

	local record_name=${1,,}
	local record_type=${2^^}
	local first_match=$3
	echo -n "Searching zone ... " >&2

	opts[a]=zone_load_multi
	unset opts[z]
	for zone in `call_cf .response.zones.objs ,zone_name`
	do
		zone=${zone,,}
		if [[ "$record_name" =~ ^((.*)\.|)$zone$ ]]
		then
			subdomain=${BASH_REMATCH[2]}
			opts[z]=$zone
			break
		fi
	done
	[ -z "${opts[z]}" ] && { echo >&2; return 2; }
	echo -n "${opts[z]}, searching ID ... " >&2
		
	opts[a]=rec_load_all
	unset opts[id]

	rec_found=0
	oldIFS=$IFS
	IFS=$NL
	for test_record in `call_cf .response.recs.objs ,name,type,rec_id,ttl,content`
	do
		IFS=$oldIFS
		set -- $test_record
		if [ "$1" = "$record_name" ]
		then
			if [ -z "$record_type" -o "$2" = "$record_type" ]
			then
				let rec_found++
				[ $rec_found -gt 1 ] && { echo >&2; return 4; }
				opts[name]=$1
				shift
				opts[type]=$1
				shift
				opts[id]=$1
				shift
				opts[ttl]=$1
				shift
				opts[content]="$@"
				if [ "$first_match" = 1 ]
				then
					# accept first matching record
					break
				fi
			fi
		fi
		IFS=$NL
	done
	IFS=$oldIFS

	echo "${opts[id]}" >&2
	[ -z "${opts[id]}" ] && return 3

	return 0
}

get_zone_id()
{
	zone_id=`call_cf_v4 GET /zones name="$1" -- .result ,id`
	if [ -z "$zone_id" ]
	then
		die "No such DNS zone found"
	fi
}




while [ -n "$1" ]
do
	case "$1" in
	-E)	shift
		CF_ACCOUNT=$1;;
	-T)	shift
		CF_TOKEN=$1;;
	-v)	verbose=1;;
	-h|--help)
		die "$usage_text" 0
		;;
	--)	shift
		break;;
	-*)	false;;
	*)	break;;
	esac
	shift
done


if [ -z "$CF_ACCOUNT" ]
then
	die "No \$CF_ACCOUNT set.

$usage_text"
fi
if [ -z "$CF_TOKEN" ]
then
	die "No \$CF_TOKEN set.

$usage_text"
fi

opts[email]=$CF_ACCOUNT
opts[tkn]=$CF_TOKEN


if [ -z "$1" ]
then
	die "$usage_text" 1
fi




cmd1=$1
shift

case "$cmd1" in
list|show)
	cmd2=$1
	shift
	case "$cmd2" in
	zone|zones)
		opts[a]=zone_load_multi
		call_cf .response.zones.objs %"%s$TA%s$TA#%s$TA%s$TA%s$NL" ',zone_name,zone_status_class,zone_id,<str_replace(array("{",,"}"),, "",, strtolower($orig_ns_names)),fqdns'
		;;
	setting|settings)
		[ -z "$1" ] && die "Usage: cloudflare list settings <zone>"
		opts[a]=zone_settings
		opts[z]=${1,,}
		call_cf .response.result.objs.0 table
		;;
	record|records)
		[ -z "$1" ] && die "Usage: cloudflare list records <zone>"
		opts[a]=rec_load_all
		opts[z]=${1,,}
		call_cf .response.recs.objs %"%-20s %11s %-8s %s$TA; %s #%s$NL" ',@zone_name@name,?auto_ttl?<"$ttl_ceil(auto)"?ttl,type,?prio?<"$prio $content"?content,!props,rec_id'
		;;
	listing|blocking)
		opts[a]=ipmgmt_load
		call_cf .response.ip_rules.objs %"%-15s$TA%s$TA%s$NL" ,ip,rule,edate
		;;
	*)
		die "Parameters:
   zones, settings, records, listing"
		;;
	esac
	;;
	
add)
	cmd2=$1
	shift
	case "$cmd2" in
	record)
		opts[a]=rec_new
		[ $# -lt 4 ] && die "Usage: cloudflare add record <zone> <type> <name> <content> [ttl] [prio] [service] [protocol] [weight] [port]
   <zone>      domain zone to register the record in (see \"cloudflare list zones\")
   <type>      eg. A AAAA CNAME MX NS SRV TXT SPF LOC (case insensitive)
   <name>      subdomain name, or \"@\" to refer to the domain's root
   <content>   usually an IP (A, AAAA), a target domain name (CNAME, MX, SRV), or free text (TXT)
   [ttl]       Time To Live, 1 = auto
   [prio]      required only by MX and SRV records, enter \"10\" if unsure
   [service]   free service name, eg. \"_sip\" (for SRV record type)
   [protocol]  _tcp, _udp, _tls (SRV)
   [weight]    relative weight for records with the same priority
   [port]      layer 4 port number"
		for prm in z type name content
		do
			opts[$prm]=$1
			shift
		done
		opts[type]=${opts[type]^^}
		opts[content]=${opts[content]//+/%2B}
		[ -n "$1" ] && opts[ttl]=$1 || opts[ttl]=1
		shift
		if [ "${opts[type]}" = MX ]
		then
			opts[prio]=$1
			shift
		elif [ "${opts[type]}" = SRV ]
		then
			for prm in prio service protocol weight port
			do
				opts[$prm]=$1
				shift
			done
			opts[srvname]=${opts[name]}
			opts[target]=${opts[content]}
			[ "${opts[service]:0:1}" != _ ] && opts[service]="_${opts[service]}"
			[ "${opts[protocol]:0:1}" != _ ] && opts[protocol]="_${opts[protocol]}"
		fi
		if [ "${opts[type]}" = MX -a -z "${opts[prio]}" ]
		then
			opts[prio]=10
		fi
		call_cf "&result&msg"
		;;
	whitelist|blacklist)
		case "$cmd2" in
		  whitelist)	opts[a]=wl;;
		  blacklist)	opts[a]=ban;;
		esac
		[ -z "$1" ] && die "Usage: cloudflare add [whitelist | blacklist] <IP>"
		opts[key]=$1
		call_cf "&result&msg"
		;;
	zone)
		if [ $# != 1 ]
		then
			die "Usage: cloudflare add zone <name>"
		fi
		call_cf_v4 POST /zones name="$1" -- .result '&<"status: $status"'
		;;
	*)
		die "Parameters:
   zone, record, whitelist, blacklist"
	esac
	;;
	
delete)
	cmd2=$1
	shift
	case "$cmd2" in
	record)
		prm1=$1
		prm2=$2
		shift
		shift
		
		if is_integer "$prm2"
		then
			if [ -n "$1" ]
			then
				die "Unknown parameters: $@"
			fi
			opts[id]=$prm2
			opts[z]=$prm1
		
		else
			record_type=
			first_match=0
			
			[ -z "$prm1" ] && die "Usage: cloudflare delete record [<record-name> [<type>|\"first\"] | [zone] <record-id>]"
			
			if [ "$prm2" = first ]
			then
				first_match=1
			else
				record_type=${prm2^^}
			fi
			
			findout_z_id "$prm1" "$record_type" "$first_match"
			case $? in
			0)	true;;
			2)	die "No suitable DNS zone found for \`$prm1'";;
			3)	die "DNS record \`$prm1' not found";;
			4)	die "Ambiguous record spec: \`$prm1'";;
			*)	die "Internal error";;
			esac
			
		fi
		
		opts[a]=rec_delete
		call_cf "&result&msg"
		;;
	listing)
		opts[a]=nul
		[ -z "$1" ] && die "Usage: cloudflare delete listing <IP>"
		opts[key]=$1
		call_cf "&result&msg"
		;;
	zone)
		if [ $# != 1 ]
		then
			die "Usage: cloudflare delete zone <name>"
		fi
		get_zone_id "$1"
		call_cf_v4 DELETE /zones/$zone_id
		;;
	*)
		die "Parameters:
   zone, record, listing"
	esac
	;;
	
change|set)
	cmd2=$1
	shift
	case "$cmd2" in
	zone)
		[ -z "$1" ] && die "Usage: cloudflare set zone <zone> [setting] [value]"
		opts[z]=$1
		shift
		
		case "$1" in
		security_level|sec_lvl)
			opts[a]=sec_lvl
			opts[v]=$2
			call_cf "&result&msg"
			;;
		cache_level|cache_lvl)
			opts[a]=cache_lvl
			opts[v]=$2
			call_cf "&result&msg"
			;;
		rocket_loader|rocket_ldr|async)
			opts[a]=async
			opts[v]=$2
			[ "$2" = off ] && opts[v]=0
			[ "$2" = auto ] && opts[v]=a
			[ "$2" = manual ] && opts[v]=m
			call_cf "&result&msg"
			;;
		minify)
			opts[a]=minify
			opts[v]=$2
			call_cf "&result&msg"
			;;
		devmode|dev_mode)
			opts[a]=devmode
			opts[v]=$2
			[ "$2" = on ] && opts[v]=1
			[ "$2" = off ] && opts[v]=0
			call_cf "&result&msg"
			;;
		mirage2)
			opts[a]=mirage2
			opts[v]=$2
			[ "$2" = on ] && opts[v]=1
			[ "$2" = off ] && opts[v]=0
			call_cf "&result&msg"
			;;
		ipv6)
			opts[a]=ipv46
			opts[v]=$2
			[ "$2" = on ] && opts[v]=3
			[ "$2" = off ] && opts[v]=0
			call_cf "&result&msg"
			;;
		*)
			die "Parameters:
   sec_lvl [help | high | med | low | eoff]
   cache_lvl [agg | basic]
   rocket_loader [off | auto | manual]
   minify <bitmask>
       bit 1 = JS
       bit 2 = CSS
       bit 3 = HTML
   devmode [on | off]
   mirage2 [on | off]
   ipv6 [on | off]"
			;;
		esac
		;;
	record)
		str1="Usage: cloudflare set record <record> [\"type\" <type> | \"first\"] [<parameter> <value>] [<parameter> <value>] ...
You must enter record type (A, MX, ...) when there are more records with the same name, or enter \"first\" to modify the first matching record in the zone.
Parameters:
  content        Usually IP address, or target for MX and CNAME
  service_mode   Turn CF proxying on (1) or off (0)
  for other parameters see 'add record' command."
		[ -z "$1" ] && die "$str1"
		record_name=$1
		shift
		record_type=
		first_match=0

		while [ -n "$1" ]
		do
			if [ "$1" = first ]
			then
				first_match=1
				shift
			elif [ "$1" = type ]
			then
				shift
				record_type=${1^^}
				shift
			else
				break
			fi
		done

		if [ -z "$1" ]
		then
			die "$str1"
	   	fi

		findout_z_id "$record_name" "$record_type" "$first_match"
		e=$?
		case $e in
		0)	true;;
		2)	die "No suitable DNS zone found for \`$record_name'";;
		3)	die "DNS record \`$record_name' not found";;
		4)	die "Ambiguous record name: \`$record_name', specify \"type\" parameter!";;
		*)	die "Internal error";;
		esac
		
		while [ -n "$1" ]
		do
			param=$1
			new=$2
			[ "$param" != z -a "$param" != id -a -n "$new" ] && opts[$param]=$new
			shift
			shift
		done

		opts[a]=rec_edit
		
		call_cf "&result&msg"
		;;
	*)
		die "Parameters:
   zone, record"
	esac
	;;
	
clear)
	case "$1" in
	cache)
		shift
		[ -z "$1" ] && die "Usage: cloudflare clear cache <zone>"
		opts[a]=rec_load_all
		opts[z]=$1
		opts[v]=1
		call_cf "&result&msg"
		;;
	*)
		die "Parameters:
   cache"
		;;
	esac
	;;
	
check)
	case "$1" in
	zone)
		shift
		[ -z "$1" ] && die "Usage: cloudflare check zone <zone>"
		get_zone_id "$1"
		call_cf_v4 PUT /zones/$zone_id/activation_check
		;;
	*)
		die "Parameters:
   zone"
		;;
	esac
	;;

invalidate)
	if [ -n "$1" ]
	then
		urls=
		zone_id=
		for url in "$@"
		do
			urls="${urls:+,}\"$url\""
			if [ -z "$zone_id" ]
			then
				if [[ "$url" =~ ^([^:]+:)?/*([^:/]+) ]]
				then
					re_grps=${#BASH_REMATCH[@]}
					domain=${BASH_REMATCH[re_grps-1]}
					while true
					do
						zone_id=`get_zone_id "$domain" 2>/dev/null; echo "$zone_id"`
						if [ -n "$zone_id" ]
						then
							break
						fi
						parent=${domain#*.}
						if [ "$parent" = "$domain" ]
						then
							break
						fi
						domain=$parent
					done
				fi
			fi
		done
		if [ -z "$zone_id" ]
		then
			die "Zone name could not figured out."
		fi
		call_cf_v4 DELETE /zones/$zone_id/purge_cache "{\"files\":[$urls]}"
	else
		die "Usage: cloudflare invalidate <url-1> [url-2 [url-3 [...]]]"
	fi
	;;
	
json)
	json_decode "$@"
	;;
	
*|help)
	die "Commands:
   show, add, delete, set, clear, invalidate check"
	;;
esac

